FRma = ((1 + cos(12*pi*w)+2*u2)/12)^2
plot(w, FRma, type='l',xlab='frequency')
w=seq(0,0.5, by=0.01)
FRdiff = abs(1-exp(2i*pi*w))^2
plot(w, FRdiff, type='l',xlab='frequency')
FRdiff2 = abs(1-exp(24i*pi*w))^2
plot(w, FRdiff2, type='l',xlab='frequency')
plot(w, FRdiff, type='l',xlab='frequency')
plot(w, FRdiff2, type='l',xlab='frequency')
FRdiff2 = abs(1-exp(2i*pi*w*13))^2
plot(w, FRdiff2, type='l',xlab='frequency')
rep(1, 3) / 3
rep(1,3)
rep(1,4)
seq(1,3)
seq(1,5)
1:3
a<-1:10
a[c(1,2)]
a[c(2,3)]
c(2,3)
c(3,2)
a[c(3,2)]
a[c(11,2)]
a[a>1]
a<-1:5
b<-6:10
a+b
a*b
exp()
exp(a)
exp(1)
exp(2)
exp(0)
paste("Lin", " YU", sep="")
strsplit("Lin Yu", split = " ")
mix <- c(1, 2, "A")
class(mix)
x <- matrix(1:10, nrow = 2, ncol = 5)
x
t(x)
a <- matrix(11:20, nrow = 2, ncol =5)
rbind(x,a)
cbind(x,a)
a
y <- matrix(1, nrow = 2, ncol = 5)
x * y
z <- t(y)
x %*% z
y
> y <- matrix(11:20, nrow = 2, ncol = 5)
y <- matrix(11:20, nrow = 2, ncol = 5)
x*y
x
y
x%*%y
a <- 1:5
b <- "Lin"
c <- z
out <- list(a = a, b = b, c = c)
out[1]
out[[1]]
out$a
data("iris")
dim(iris)
head(iris)
iris$Sepal.Length
iris[1,2]
x <- rnorm(10, 0 , 1)
plot(1:10, x)
hist(x)
read.csv("/Dropbox/Dunhams/sales.csv")
read.csv("users/annietang/Dropbox/Dunhams/sales.csv")
getwd()
read.csv("/Users/annietang/Dropbox/Dunhams/sales.csv")
source("blind.R") # load the blind search methods
# read D bits from integer x:
binint=function(x,D)
{ x=rev(intToBits(x)[1:D]) # get D bits
# remove extra 0s from raw type:
as.numeric(unlist(strsplit(as.character(x),""))[(1:D)*2])
}
binint=function(x,D)
binint=function(x,D)
{ x=rev(intToBits(x)[1:D]) # get D bits
as.numeric(unlist(strsplit(as.character(x),""))[(1:D)*2])
source("blind.R") # load the blind search methods
binint=function(x,D)
source("blind.R") # load the blind search methods
# read D bits from integer x:
binint=function(x,D)
{ x=rev(intToBits(x)[1:D]) # get D bits
# remove extra 0s from raw type:
as.numeric(unlist(strsplit(as.character(x),""))[(1:D)*2])
}
### blind.R file ###
# full bind search method
#    search - matrix with solutions x D
#    FUN - evaluation function
#    type - "min" or "max"
#    ... - extra parameters for FUN
fsearch=function(search,FUN,type="min",...)
{
x=apply(search,1,FUN,...) # run FUN over all search rows
ib=switch(type,min=which.min(x),max=which.max(x))
return(list(index=ib,sol=search[ib,],eval=x[ib]))
}
# depth-first full search method
#    l - level of the tree
#    b - branch of the tree
#    domain - vector list of size D with domain values
#    FUN - eval function
#    type - "min" or "max"
#    D - dimension (number of variables)
#    x - current solution vector
#    bcur - current best sol
#    ... - extra parameters for FUN
dfsearch=function(l=1,b=1,domain,FUN,type="min",D=length(domain),
x=rep(NA,D),
bcur=switch(type,min=list(sol=NULL,eval=Inf),
max=list(sol=NULL,eval=-Inf)),
...)
{ if((l-1)==D) # "leave" with solution x to be tested:
{ f=FUN(x,...);fb=bcur$eval
ib=switch(type,min=which.min(c(fb,f)),
max=which.max(c(fb,f)))
if(ib==1) return (bcur) else return(list(sol=x,eval=f))
}
else # go through sub branches
{ for(j in 1:length(domain[[l]]))
{ x[l]=domain[[l]][j]
bcur=dfsearch(l+1,j,domain,FUN,type,D=D,
x=x,bcur=bcur,...)
}
return(bcur)
}
}
df = read.delim(pipe("pbpaste"), sep=" ", header=TRUE)
df = read.delim(pipe("pbpaste"), sep=" ", header=TRUE)
df = read.table(pipe("pbpaste"), sep=" ", header=TRUE)
df = read.table(pipe("pbpaste"), sep=" ")
df = read.delim(pipe("pbpaste"), sep=" ")
df = read.delim(pipe("pbpaste"))
print(df)
df = read.delim(pipe("pbpaste"), sep="")
print(df)
df = read.delim(pipe("pbpaste"), sep=" ")
df = read.delim(pipe("pbpaste"), sep="")
print(df)
View(df)
View(df)
boxplot(df)
summary(df)
pairs(df)
mean(df)
mean(df.rows)
mean(df.rows())
mean(df[,])
df[,]
rowMeans(df)
means = rowMeans(df)
means
cov(df)
covariance = cov(df)
View(covariance)
View(covariance)
View(covariance)
View(covariance)
trace <- function ( A ){  #trace function
temp = (nrow(A)== nrow(A))
if(temp) {temp = sum(diag(A))}
return(temp) }
A = cbind(c(2,1), c(1,1))
trace(A) #trace of A
x = c(5, 1, 3)
y = c(-1, 3, 1)
#Part 1
sqrt(sum(x^2)) #length of x
sqrt(sum(y^2)) #length of y
#Part 2
t(x) %*% y #inner product of x,y
#Part a
trace <- function ( A ){
temp = (nrow(A)== nrow(A))
if(temp) {temp = sum(diag(A))}
return(temp) } #trace function
A = cbind(c(2,1), c(1,1))
trace(A) #trace of A
det(A) #determinant of A
inverseA = solve(A) #inverse of A
#Part b
A%*%inverseA #verifying the correctness of the inverse
#Part c
eigen(A)
inverseA =
inverseA
inverseA
#Part a
df = read.delim(pipe("pbpaste"), sep="") #read copied data into a dataframe
boxplot(df) #boxplots of all variables
#Part b
summary(df) #summary statistics of all variables
#Part c
pairs(df) #scatterplots of all pairs of variables
#Part d
rowMeans(df) #mean vector of all row means
covariance = cov(df) #7x7 covariance matrix
df = read.delim("HW1.csv) #read copied data into a dataframe
boxplot(df) #boxplots of all variables
#Part b
summary(df) #summary statistics of all variables
#Part c
pairs(df) #scatterplots of all pairs of variables
#Part d
rowMeans(df) #mean vector of all row means
covariance = cov(df) #7x7 covariance matrix
df = read.delim("HW1.csv) #read copied data into a dataframe
boxplot(df) #boxplots of all variables
#Part b
summary(df) #summary statistics of all variables
#Part c
pairs(df) #scatterplots of all pairs of variables
#Part d
rowMeans(df) #mean vector of all row means
covariance = cov(df) #7x7 covariance matrix
df = read.csv("HW1.csv") #read copied data into a dataframe
cd
df = read.csv("/Users/annietang/Dropbox/NC State/ST537/HW1.csv") #read copied data into a dataframe
View(df)
View(df)
boxplot(df) #boxplots of all variables
summary(df) #summary statistics of all variables
pairs(df) #scatterplots of all pairs of variables
rowMeans(df) #mean vector of all row means
covariance = cov(df) #7x7 covariance matrix
#ST537 Homework 1
#Author: Annie Tang
#Date: January 19, 2018
#Problem 1
x = c(5, 1, 3)
y = c(-1, 3, 1)
#Part 1
sqrt(sum(x^2)) #length of x
sqrt(sum(y^2)) #length of y
#Part 2
t(x) %*% y #inner product of x,y
#Problem 3
#Part a
trace <- function ( A ){
temp = (nrow(A)== nrow(A))
if(temp) {temp = sum(diag(A))}
return(temp) } #trace function
A = cbind(c(2,1), c(1,1))
trace(A) #trace of A
det(A) #determinant of A
inverseA = solve(A) #inverse of A
#Part b
A%*%inverseA #verifying the correctness of the inverse
#Part c
eigen(A)
#Problem 6
#Part a
df = read.csv("/Users/annietang/Dropbox/NC State/ST537/HW1.csv") #read data from csv file
boxplot(df) #boxplots of all variables
#Part b
summary(df) #summary statistics of all variables
#Part c
pairs(df) #scatterplots of all pairs of variables
#Part d
rowMeans(df) #mean vector of all row means
covariance = cov(df) #7x7 covariance matrix
colMeans(df) #mean vector of all row means
covariance = cov(df) #7x7 covariance matrix
View(covariance)
View(covariance)
cov(df) #7x7 covariance matrix
#Part a
df = read.csv("/Users/annietang/Dropbox/NC State/ST537/HW1.csv") #read data from csv file
boxplot(df) #boxplots of all variables
#Part b
summary(df) #summary statistics of all variables
#Part c
pairs(df) #scatterplots of all pairs of variables
#Part d
colMeans(df) #mean vector of all row means
cov(df) #7x7 covariance matrix
inverseA
install.packages("boot")
load("boot")
require(boot)
cd4
head(cd4)
y=cd4$baseline
stem(y)
boxplot(y)
hist(y)
hist(y, xlab="cd4 cell counts", main="Baseline")  # frequency on the y-axis
hist(y, freq=FALSE, xlab="cd4 cell counts", main="Baseline") # relative frequency on y-axis
cd4_long=data.frame(x=rep(c("baseline", "oneyear"), each=nrow(cd4)), y=as.numeric(unlist(cd4)))
names(cd4_long) = c("time", "cd4")
par(mfrow=c(1,1))
boxplot(cd4 ~ time, data=cd4_long,  main = "cd4 data", ylab="cd4 cell counts")
boxplot(cd4 ~ time, data=cd4_long, notch=TRUE, main = "cd4 data", ylab="cd4 cell counts" )
par(mfrow=c(2,2))
hist(cd4$baseline, freq=FALSE, xlab="cd4 cell counts", main="Baseline",
xlim=c(range(cd4)), ylim=c(0, 0.55), ylab="rel frequency") # relative
hist(cd4$oneyear, freq=FALSE, xlab="cd4 cell counts", main="One year",
xlim=c(range(cd4)), ylim=c(0, 0.55), ylab="rel frequency") # relative
plot(density(x=cd4$baseline), xlim=c(range(cd4)),
ylim=c(0, 0.55), ylab ="Kernel density estimate", main="Baseline")
plot(density(x=cd4$oneyear), xlim=c(range(cd4)),
ylim=c(0, 0.55), ylab = "Kernel density estimate", main="One year")
install.packages("vioplot")
par(mfrow=c(1,1))
require(vioplot)
names(cd4)
vioplot(cd4$baseline, cd4$oneyear, names=c("baseline", "oneyear"), col="gold", horizontal = TRUE)
range(cd4)
vioplot(cd4$oneyear, col="cyan", horizontal = FALSE, at=1.5, add=TRUE,lty=2)
range0  = c(1, 6.5)
plot(x=cd4$baseline, y=cd4$oneyear, xlim=range0 , ylim=range0, xlab="Baseline", ylab="One year" )
vioplot(cd4$baseline, col="tomato", horizontal = TRUE, at=1.5, add=TRUE,lty=2, rectCol="gray")
vioplot(cd4$oneyear, col="cyan", horizontal = FALSE, at=1.5, add=TRUE,lty=2)
head*mtcars
head(mtcars)
str(mtcars)
attach(mtcars)
am
am = as.factor(am)
plot(mtcars$wt, mtcars$mpg, xlab="Car Weight", ylab="Miles per Gallon", main="scatterplot")
library(aplpack)
install.packages("aplpack")
library(aplpack)
install.packages("tcltk")
library(aplpack)
install.packages("XQuartz")
library(aplpack)
bagplot(mtcars$wt, mtcars$mpg, xlab="Car Weight", ylab="Miles per Gallon", main="bagplot") # bivariate version of boxplot
# The inner polygon (the “bag”) of the bagplot contains the central 50% of the data.
index_chull = chull(mtcars$wt, mtcars$mpg)  # find the indices of the convex hull
exst = index_chull[1:3]
extreme = row.names(mtcars)[exst]
match(extreme, row.names(mtcars))
extreme
extreme = c("ChryImp", "LincCont", "CadFleet")
require(MVA)
install.packages("MVA")
require(MVA)
require(MVA)
bvbox(cbind(mtcars$wt, mtcars$mpg), xlab="Car Weight", ylab="Miles per Gallon", pch = 19,
cex = 1.25, col = "red")
text(mtcars$wt[exst], mtcars$mpg[exst],labels = extreme, cex = .8, # label names, small font
pos = c(2,1,3))  #L,L, L top  #1234=Bottom Ltop R
bvbox(cbind(mtcars$wt, mtcars$mpg), xlab="Car Weight", ylab="Miles per Gallon", pch = 19,
cex = 1.25, col = "red")
text(mtcars$wt[exst], mtcars$mpg[exst],labels = extreme, cex = .8, # label names, small font
pos = c(2,1,3))  #L,L, L top  #1234=Bottom Ltop R
library(aplpack)
bagplot(mtcars$wt, mtcars$mpg, xlab="Car Weight", ylab="Miles per Gallon", main="bagplot") # bivariate version of boxplot
ch <- c(index_chull,index_chull[1]) # loop back to the beginning
plot(mtcars$wt, mtcars$mpg, pch = 19, col = 2, cex = 1.25, main="Convex hull of the data") # plot the original data
lines(mtcars$wt[ch], mtcars$mpg[ch],type = "l", col = 3, lwd = 2) # bold, green lines
require(aplpack)
nlev <- 5 # Number of levels
colors <- heat.colors(9)[3:(nlev+2)]
plothulls(cbind(mtcars$wt, mtcars$mpg), n.hull = nlev, col.hull = colors, xlab="Car Weight",
ylab="Miles per Gallon", lty.hull = 1:nlev, density = NA, col = 0,
main = " ")
points(cbind(mtcars$wt, mtcars$mpg), pch = 16, cex = 1, col = "blue")
pairs(mtcars, pch = 16, col = "blue")
pairs(mtcars[,c(1,3:7)], lwd = 3, pch = 16, cex = 1.05, col = "black",
gap = 0.5, # distance between the plots
xaxt = "n",# removes the numbers on the x axis
yaxt = "n",# removes the numbers on the y axis
panel = panel.smooth)
bagplot.pairs(mtcars[,c(1,3:7)], gap = 0.5, col.baghull = "green")
coplot(wt ~ mpg | cyl, data=mtcars, rows=1, pch=16, cex=1.75, col="blue",
bar.bg = c(num = "grey", fac = gray(0.95) ))
coplot(mpg ~ wt | cyl, data=mtcars, rows=1, pch=16, cex=1.75, col="blue",
bar.bg = c(num = "grey", fac = gray(0.95) ))
library(MASS)
head(iris)
data(iris)
head(iris)
dat = as.matrix(iris[,1:4])  ## extract the measurements
species = iris[,5]
summary(dat)
summary(species)
pairs(~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,
data=dat, main="Pair-wise plots of iris data", col=species,
cex.main=2, cex.axis=2)
parcoord(log(ir)[ , c(3, 4, 1, 2)], # Order the axes
col = c(rep("red", 50), rep("green", 50), rep("blue", 50)))
ir <- rbind(iris3[ , , 1], iris3[ , , 2], iris3[ , , 3])
parcoord(log(ir)[ , c(3, 4, 1, 2)], # Order the axes
col = c(rep("red", 50), rep("green", 50), rep("blue", 50)))
# source("../_scratch/_course_wrap_xyz_NMOF.R") ; wrap_NMOF(seedInit=-1)
# install.packages(c("NMOF", "hash", "tools", "utils", "bazar"))
rm(list=ls())
library(hash)
library(tools) ; library(utils)
source("../_course_lib_R/_course_OF_xyz.R")
# initialize globPar
globPar=hash()       ; clear(globPar)
wrap_NMOF = function( sampleSize=1, seedInit=-1, OFname="wildN", OFpar=2,
iterLmt=200, popSize=64, trace=FALSE, VTR=0, tolY=0.005)
{
library(NMOF)
# read the generic table of BKV (best-Known-Value) and related parameters
fileBKV = "../_course_lib_R/_course_OF_xyz_BKV.txt"
T = read.table(fileBKV, header=TRUE, comment.char="#", colClasses = "character") ;# print(T)
idx      = which(T$OFname == OFname)    ;# print(idx)
BKV      = as.numeric(T[idx,2])         ;# print(BKV)
lowerBnd = rep(as.numeric(T[idx,4]))    ;# print(lowerBnd)
upperBnd = rep(as.numeric(T[idx,5]))    ;# print(lowerBnd)
# assign the values to global hash array for access by OF (Objective Functions)
globPar[[paste(sep="", OFname, ".BKV")]]          = BKV
globPar[[paste(sep="", OFname, ".tolY")]]         = tolY
globPar[[paste(sep="", OFname, ".isValueOnly")]]  = FALSE
print(globPar) ;# return()
if (seedInit < 0) {seedInit = round(0.5 + 9999*runif(1))} ; set.seed(seedInit)
nPar = length(OFpar)
if (nPar  > 1)  {
lowerBnd = rep(lowerBnd, nPar)
upperBnd = rep(upperBnd, nPar)
}
valueTarget = 0 ;# since each OF in _course_OF_xyz.R is in the canonical form
cat("\nseedInit =", seedInit,
"\nOFname   =", OFname,
"\nlowerBnd =", lowerBnd,
"\nupperBnd =", upperBnd,
"\niterLmt  =", iterLmt,
"\npopSize  =", popSize,
"\nBKV      =", BKV,
"\ntolY     =", tolY,
"\n")
out = DEopt(OF=OFname, algo=list(min=lowerBnd, max=upperBnd,
nP=popSize, nG=iterLmt, printDetail=printDetail))
return(out)
} # wrap_NMOF
source("../_course_lib_R/_course_OF_xyz.R") ; pi_digits()
setwd("/Users/annietang/Google Drive/CSC801-002-2018-sp/_course_lib_R/Archive/")
source("../_course_OF_xyz.R") ; pi_digits()
source("_course_OF_xyz.R") ; pi_digits()
source("_course_OF_xyz.R") ; pi_digits()
setwd("/Users/annietang/Google Drive/CSC801-002-2018-sp/")
source("../_course_lib_R/_course_OF_xyz.R") ; pi_digits()
setwd("/Users/annietang/Google Drive/CSC801-002-2018-sp/_course_lib_R/Archive/")
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_target_verify()
setwd("/Users/annietang/Google Drive/CSC801-002-2018-sp/Homeworks/")
source("../_course_lib_R/_course_OF_xyz.R") ; pi_digits()
setwd("~/Google Drive/CSC801-002-2018-sp/_course_lib_R")
source("../_course_lib_R/_course_OF_xyz.R") ; pi_digits()
import(plotrix)
load(plotrix)
load("plotrix")
install.packages("plotrix")
source("../_course_lib_R/_course_OF_xyz.R") ; pi_digits()
load("plotrix")
library("plotrix")
source("../_course_lib_R/_course_OF_xyz.R") ; pi_digits()
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_target_verify()
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_target_verify("wildN")
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_target_verify()
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_target_verify("wildN")
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 10, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 10, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 11, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_4", xLO= 11, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="wildN"     , xLO=-18, xHI=18,  xBits=11)
fileOF_quant_exh = paste(getwd(), "/fg_OF_", OFname, "_quant_exh.pdf", sep="")
pdf(file = fileOF_quant_exh, height=7.0,  width=14.0, pagecentre=TRUE)
fileOF_quant_exh = paste(getwd(), "/fg_OF_",  "_quant_exh.pdf", sep="")
pdf(file = fileOF_quant_exh, height=7.0,  width=14.0, pagecentre=TRUE)
fileOF_quant_exh = paste(getwd(), "/fg_OF_",  "_quant_exh.pdf", sep="")
pdf(file = fileOF_quant_exh, height=7.0,  width=14.0, pagecentre=TRUE)
getwd()
setwd("/Users/annietang/Google Drive/CSC801-002-2018-sp/_course_lib_R/")
setwd("/Users/annietang/Google Drive/CSC801-002-2018-sp/_course_lib_R/")
fileOF_quant_exh = paste(getwd(), "/fg_OF_", OFname, "_quant_exh.pdf", sep="")
pdf(file = fileOF_quant_exh, height=7.0,  width=14.0, pagecentre=TRUE)
setwd("/Users/annietang/Google Drive/CSC801-002-2018-sp/_course_lib_R/")
getwd()
fileOF_quant_exh = paste(getwd(), "/fg_OF_", OFname, "_quant_exh.pdf", sep="")
pdf(file = fileOF_quant_exh, height=7.0,  width=14.0, pagecentre=TRUE)
fileOF_quant_exh = paste(getwd(), "/fg_OF_", "_quant_exh.pdf", sep="")
pdf(file = fileOF_quant_exh, height=7.0,  width=14.0, pagecentre=TRUE)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 10, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 11, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_4", xLO= 11, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="wildN"     , xLO=-18, xHI=18,  xBits=11)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_boxes(OFname="wildN",      tolXmin=0.0001, tolXmax=0.01)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_boxes(OFname="aParab13_8", tolXmin=0.0005, tolXmax=0.01)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_boxes(OFname="rastriginN", tolXmin=0.0002, tolXmax=0.01)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_boxes(OFname="schwefelN",  tolXmin=0.0002, tolXmax=0.01)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_boxes(OFname="aParab13_8", tolXmin=0.0005, tolXmax=0.01)
3:5
length(2:5)
ceiling(log2(20/.0005))
ceiling(log2(20/.01))
ceiling(log2(20/.005))
ceiling(log2(20/.01))
ceiling(log2(20/.001))
ceiling(log2(20/.0005))
ceiling(log2(20/.00005))
ceiling(log2(20/.01))
ceiling(log2(20/.001))
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_boxes(OFname="aParab13_8", tolXmin=0.001, tolXmax=0.05)
source("../_course_lib_R/_course_wrap_xyz.R") ; out = wrap_DEoptim(seedInit=-1, OFname="wildN")  ; summary(out)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 10, xHI=15,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 10, xHI=16,  xBits=4)
source("../_course_lib_R/_course_wrap_xyz.R") ; OF_quant_exh(OFname="aParab13_2", xLO= 10, xHI=14,  xBits=4)
